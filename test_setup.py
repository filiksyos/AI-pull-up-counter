#!/usr/bin/env python3
"""
Quick test script to verify AI Pull-Up Counter components
"""

import os
import sys
from pathlib import Path

def test_imports():
    """Test if all components can be imported"""
    print("üß™ Testing component imports...")
    
    try:
        # Test core components
        from frame_extractor import FrameExtractor
        print("‚úÖ FrameExtractor")
        
        from ai_analyzer import PullUpAIAnalyzer
        print("‚úÖ PullUpAIAnalyzer")
        
        from utils.pose_detector import PullUpPoseDetector
        print("‚úÖ PullUpPoseDetector")
        
        from utils.overlay_system import OverlaySystem
        print("‚úÖ OverlaySystem")
        
        from utils.video_utils import get_video_info, validate_video
        print("‚úÖ VideoUtils")
        
        import config
        print("‚úÖ Config")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        return False

def test_config():
    """Test configuration loading"""
    print("\nüîß Testing configuration...")
    
    try:
        import config
        
        # Check if required constants exist
        required_configs = [
            'OPENROUTER_BASE_URL',
            'MODEL_NAME', 
            'KEY_FRAME_INTERVAL',
            'MAX_FRAMES_PER_REQUEST'
        ]
        
        for conf in required_configs:
            if hasattr(config, conf):
                print(f"‚úÖ {conf}: {getattr(config, conf)}")
            else:
                print(f"‚ùå Missing config: {conf}")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Config error: {e}")
        return False

def test_video_processing():
    """Test video processing components without actual video"""
    print("\nüìπ Testing video processing capabilities...")
    
    try:
        from utils.video_utils import get_video_info
        
        # Test with a non-existent file (should handle gracefully)
        info = get_video_info("nonexistent.mp4")
        if info == {}:
            print("‚úÖ Video info handles missing files")
        else:
            print("‚ùå Video info should return empty dict for missing files")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Video processing error: {e}")
        return False

def test_ai_analyzer_init():
    """Test AI analyzer initialization"""
    print("\nü§ñ Testing AI analyzer initialization...")
    
    try:
        # This should fail gracefully if no API key
        from ai_analyzer import PullUpAIAnalyzer
        
        # Try to initialize (will fail without API key, but shouldn't crash)
        try:
            analyzer = PullUpAIAnalyzer()
            print("‚úÖ AI analyzer initialized successfully")
            return True
        except ValueError as e:
            if "OPENROUTER_API_KEY" in str(e):
                print("‚úÖ AI analyzer correctly requires API key")
                return True
            else:
                print(f"‚ùå Unexpected API key error: {e}")
                return False
        
    except Exception as e:
        print(f"‚ùå AI analyzer error: {e}")
        return False

def test_pose_detector_init():
    """Test pose detector initialization"""
    print("\nü¶¥ Testing pose detector initialization...")
    
    try:
        from utils.pose_detector import PullUpPoseDetector
        
        detector = PullUpPoseDetector()
        print("‚úÖ Pose detector initialized successfully")
        
        # Test if MediaPipe is working
        if hasattr(detector, 'mp_pose') and hasattr(detector, 'pose'):
            print("‚úÖ MediaPipe components loaded")
            return True
        else:
            print("‚ùå MediaPipe components not properly loaded")
            return False
        
    except Exception as e:
        print(f"‚ùå Pose detector error: {e}")
        return False

def main():
    """Run all tests"""
    print("üèãÔ∏è AI Pull-Up Counter - Component Tests")
    print("=" * 50)
    
    tests = [
        ("Component Imports", test_imports),
        ("Configuration", test_config),
        ("Video Processing", test_video_processing),
        ("AI Analyzer", test_ai_analyzer_init),
        ("Pose Detector", test_pose_detector_init)
    ]
    
    passed = 0
    total = len(tests)
    
    for name, test_func in tests:
        print(f"\nüìã Testing {name}...")
        if test_func():
            passed += 1
        else:
            print(f"‚ùå {name} test failed")
    
    print("\n" + "=" * 50)
    print(f"üìä Test Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All component tests passed!")
        print("üí° System is ready for pull-up analysis")
        print("\nüöÄ Next steps:")
        print("1. Run setup validation: python setup.py")
        print("2. Add your video as input_video.mp4")
        print("3. Run analysis: python pullup.py")
    else:
        print("‚ö†Ô∏è Some tests failed. Check your installation:")
        print("1. Install dependencies: pip install -r requirements.txt")
        print("2. Check Python version (3.8+ required)")
        print("3. Run tests again: python test_setup.py")

if __name__ == "__main__":
    main() 